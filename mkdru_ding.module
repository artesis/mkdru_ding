<?php

/**
 * @file
 * MKDRU Ding module.
 */

/**
 * Implements hook_search_info().
 */
function mkdru_ding_search_info() {
  return array(
    'title'               => t('E-articles'),
    'path'                => 'meta',
    'conditions_callback' => 'mkdru_ding_search_conditions_callback',
  );
}

/**
 * Implements hook_search_page().
 */
function mkdru_ding_search_page($results) {
  $build = array('#theme' => 'mkdru_results');
  $output['prefix']['#markup'] = drupal_render($build);
  $output['suffix']['#markup'] = '';
  return $output;
}

/**
 * Implements hook_block_info().
 */
function mkdru_ding_block_info() {
  $blocks['mkdru_ding_search_results'] = array(
    'info' => t('mkdru ding search results container.'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mkdru_ding_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'mkdru_ding_search_results':
      $block['subject'] = t('mkdru ding search results');
      $block['content'] = theme('mkdru_results');
      break;

  }
  return $block;
}

/**
 * Search callback function that is invoked by search_view().
 */
function mkdru_ding_search_conditions_callback($keys) {

}

/**
 * Implements hook_search_execute().
 */
function mkdru_ding_search_execute($keys = '', $conditions = NULL) {
  $state = array();

  if ($keys) {
    $state['query'] = $keys;
  }

  $mkdru_defaults = variable_get('mkdru_defaults', array());
  $path = drupal_get_path('module', 'mkdru_ding');

  $build = array(
    '#theme' => 'mkdru_js',
    '#setting' => array(
      'mkdru' => array(
        'settings' => json_encode($mkdru_defaults['settings']),
        'state' => $state,
      ),
    ),
  );

  drupal_render($build);

  drupal_add_js($path . '/recipe.js');
  drupal_add_js($path . '/mkdru.theme.js', array(
    'type' => 'file',
    'scope' => 'footer',
    'defer' => FALSE,
    'preprocess' => TRUE,
  ));

  drupal_add_js($path . '/mkdru_ding.js', array(
    'type' => 'file',
    'scope' => 'footer',
    'defer' => FALSE,
    'weight' => 100,
    'preprocess' => TRUE,
  ));

  return array();
}

/**
 * Implements hook_ding_facetbrowser().
 */
function mkdru_ding_ding_facetbrowser() {
  $results             = new stdClass();
  $results->facets     = array();
  // Show an empty facetbrowser block, even if search didn't return any results.
  $results->show_empty = TRUE;

  return $results;
}

/**
 * Implements hook_menu().
 */
function mkdru_ding_menu() {
  $items['admin/config/search/mkdru_ding'] = array(
    'title' => 'Pazpar2 Metasearch Ding Integration',
    'description' => 'Search settings for mkdru instance integrated into Ding.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mkdru_ding_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function mkdru_ding_init() {
  // Applies our module specific CSS to all pages. This works best because
  // all CSS is aggregated and cached so we reduce the number of HTTP
  // requests and the size is negligible.
  drupal_add_css(drupal_get_path('module', 'mkdru_ding') . '/mkdru_ding.css');
}


/**
 * Settings form.
 */
function mkdru_ding_settings($form, &$form_state) {
  $form = array();
  // Gets current values.
  $mkdru = variable_get('mkdru_defaults', array());
  if (isset($mkdru) && empty($form_state['build_info']['args'])) {
    $form_state['build_info']['args'] = $mkdru;
  }
  $form = drupal_retrieve_form('mkdru_settings_form', $form_state);
  $form['#title'] = t('Search settings for integration');

  $form['settings']['specific_author_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Search-attribute for author-links'),
    '#description' => t('Use this specific attribute for author-links instead of any'),
    '#required' => FALSE,
    '#default_value' => $mkdru['settings']['specific_author_field'],
  );

  $form['settings']['specific_subject_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Search-attribute for subject-links'),
    '#description' => t('Use this specific attribute for subject-links instead of any'),
    '#required' => FALSE,
    '#default_value' => $mkdru['settings']['specific_subject_field'],
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save configuration',
  );

  return $form;
}

/**
 * Settings form handler.
 */
function mkdru_ding_settings_submit($form, &$form_state) {
  $settings = array();
  $values = $form_state['values'];
  $settings['sp_server_auth'] = $values['settings']['is_service_proxy'] ? $values['sp_server_auth'] : 0;
  if ($settings['sp_server_auth'] == 0) {
    $settings['sp_user'] = $values['sp_user'];
    $settings['sp_pass'] = $values['sp_pass'];
  }
  $settings['pz2_path'] = $values['pz2_path'];
  $settings['is_service_proxy'] = $values['settings']['is_service_proxy'];
  $settings['autocomplete']['use_autocomplete'] = $values['settings']['autocomplete']['use_autocomplete'];
  $settings['autocomplete']['alt_url'] = $values['settings']['autocomplete']['alt_url'];
  $settings['disable_ranking'] = $values['settings']['disable_ranking'];
  $settings['mergekey'] = $values['settings']['mergekey'];
  $settings['rank'] = $values['settings']['rank'];
  $settings['specific_author_field'] = $values['settings']['specific_author_field'];
  $settings['specific_subject_field'] = $values['settings']['specific_subject_field'];

  uasort($values['settings']['facets'], function ($a, $b) {
    if ($a['orderWeight'] == $b['orderWeight']) {
      return 0;
    }
    return $a['orderWeight'] < $b['orderWeight'] ? -1 : 1;
  });

  $settings['facets'] = $values['settings']['facets'];
  $mkdru_defaults = array(
    'settings' => $settings,
    'pz2_path' => $values['pz2_path'],
    'sp_user' => $values['sp_user'],
    'sp_pass' => $values['sp_pass'],
    'sp_server_auth' => $settings['sp_server_auth'],
    'facets' => $values['settings']['facets'],
  );

  variable_set('mkdru_defaults', $mkdru_defaults);
  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Implements hook_theme().
 */
function mkdru_ding_theme() {
  return array(
    'mkdru_results' => array(
      'template' => 'mkdru-results',
      'arguments' => array(),
    ),
  );
}

/**
 * Implements hook_i18n_string_info().
 */
function mkdru_ding_i18n_string_info() {
  $groups['mkdru_ding'] = array(
    'title' => t('Universal Search Facets'),
    'description' => t('Translatable link text.'),
    'format' => FALSE,
    'list' => TRUE,
  );

  return $groups;
}

/**
 * Implements hook_i18n_string_list().
 */
function mkdru_ding_i18n_string_list($group) {
  $strings = $texts = array();

  if ($group == 'mkdru_ding') {
    $mkdru_settings = variable_get('mkdru_defaults', array());

    $facets = $mkdru_settings['facets'];

    foreach ($facets as $key => $facet) {
      $strings['mkdru_ding']['facets'][$key]['displayName'] = $facet['displayName'];
    }

    return $strings;
  }
}
